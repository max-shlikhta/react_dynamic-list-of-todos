{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","React","memo","todos","selectedUserId","selectUser","useState","query","setQuery","selectedTodos","setSelectedTodos","selectedOption","setSelectedOption","useEffect","filter","todo","lowerCaseQuery","toLowerCase","title","includes","completed","className","type","placeholder","value","onChange","event","target","map","id","userId","cn","htmlFor","String","checked","readOnly","onClick","request","endpoint","fetch","then","response","ok","Error","status","statusText","json","CurrentUser","clearUser","selectedUser","setSelectedUser","isLoaded","setIsLoaded","hasError","setHasError","getUserById","user","catch","src","alt","name","email","phone","App","setSelectedUserId","setTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8906800b.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './TodoList.scss';\n\nimport cn from 'classnames';\n\ninterface Props {\n  todos: Todo[];\n  selectedUserId: number;\n  selectUser: (userId: number) => void;\n}\n\nexport const TodoList: React.FC<Props> = React.memo(\n  ({\n    todos, selectedUserId, selectUser,\n  }) => {\n    const [query, setQuery] = useState('');\n    const [selectedTodos, setSelectedTodos] = useState<Todo[]>([]);\n    const [selectedOption, setSelectedOption] = useState('all');\n\n    useEffect(() => {\n      setSelectedTodos(todos.filter(todo => {\n        const lowerCaseQuery = query.toLowerCase();\n        const lowerCaseTitle = todo.title.toLowerCase();\n\n        if (!lowerCaseTitle.includes(lowerCaseQuery)) {\n          return false;\n        }\n\n        switch (selectedOption) {\n          case 'active':\n            return !todo.completed;\n\n          case 'completed':\n            return todo.completed;\n\n          default:\n            return true;\n        }\n      }));\n    }, [selectedOption, query, todos]);\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <input\n          className=\"TodoList__input\"\n          type=\"text\"\n          placeholder=\"Search title\"\n          value={query}\n          onChange={event => setQuery(event.target.value)}\n        />\n\n        <select\n          className=\"TodoList__input\"\n          value={selectedOption}\n          onChange={event => setSelectedOption(event.target.value)}\n        >\n          <option value=\"all\">all</option>\n          <option value=\"active\">active</option>\n          <option value=\"completed\">completed</option>\n        </select>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {selectedTodos.map(({\n              id, completed, title, userId,\n            }) => (\n              <li\n                key={id}\n                className={cn(\n                  'TodoList__item',\n                  { 'TodoList__item--unchecked': !completed },\n                  { 'TodoList__item--checked': completed },\n                )}\n              >\n                <label htmlFor={String(id)}>\n                  <input\n                    type=\"checkbox\"\n                    id={String(id)}\n                    checked={completed}\n                    readOnly\n                  />\n                  <p className=\"TodoList__title\">\n                    {title}\n                  </p>\n                </label>\n\n                <button\n                  className={cn(\n                    'TodoList__user-button',\n                    // eslint-disable-next-line max-len\n                    { 'TodoList__user-button--selected': selectedUserId === userId },\n                    'button',\n                  )}\n                  type=\"button\"\n                  onClick={() => {\n                    selectUser(userId);\n                  }}\n                >\n                  {`User# ${userId}`}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  },\n);\n","const API_URL = 'https://mate.academy/students-api/';\n\nconst request = (endpoint: string) => {\n  return fetch(`${API_URL}/${endpoint}`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n};\n\nexport const getTodos = (): Promise<Todo[]> => request('todos');\n\nexport const getUserById = (userId: number): Promise<User> => request(`users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { getUserById } from '../../api/api';\nimport './CurrentUser.scss';\n\ninterface Props {\n  userId: number;\n  clearUser: (userId: number) => void;\n}\n\nexport const CurrentUser: React.FC<Props> = React.memo(\n  ({ userId, clearUser }) => {\n    const [selectedUser, setSelectedUser] = useState<User>();\n    const [isLoaded, setIsLoaded] = useState(true);\n    const [hasError, setHasError] = useState(false);\n\n    useEffect(() => {\n      setIsLoaded(false);\n      getUserById(userId)\n        .then(user => {\n          setSelectedUser(user);\n          setIsLoaded(true);\n          setHasError(false);\n        })\n        .catch(() => setHasError(true));\n    }, [userId]);\n\n    return (\n      <div className=\"CurrentUser\">\n        {hasError\n          ? (\n            <div>\n              <p className=\"CurrentUser__error\">\n                Failed to load user!\n              </p>\n              <img\n                // eslint-disable-next-line max-len\n                src=\"https://blog.ferpection.com/photos/Gif_Humans%20vs%20machines.gif\"\n                alt=\"User error\"\n              />\n            </div>\n          )\n          : (\n            <>\n              {isLoaded\n                ? (\n                  <>\n                    <h2 className=\"CurrentUser__title\">\n                      <span>\n                        Selected user:&nbsp;\n                        {selectedUser?.id}\n                      </span>\n                    </h2>\n\n                    <h3 className=\"CurrentUser__name\">{selectedUser?.name}</h3>\n                    <p className=\"CurrentUser__email\">{selectedUser?.email}</p>\n                    <p className=\"CurrentUser__phone\">{selectedUser?.phone}</p>\n\n                    <button\n                      type=\"button\"\n                      className=\"button\"\n                      onClick={() => clearUser(0)}\n                    >\n                      Clear\n                    </button>\n                  </>\n                )\n                : (\n                  <img\n                    // eslint-disable-next-line max-len\n                    src=\"https://kharkiv.lexus.ua/wp-content/uploads/AAPL/loaders/One%20Moment%20Please%20Star%20Loader.gif\"\n                    alt=\"Loading...\"\n                  />\n                )}\n            </>\n          )}\n      </div>\n    );\n  },\n);\n","import React, { useState, useEffect } from 'react';\n\nimport './App.scss';\nimport './styles/general.scss';\n\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\n\nexport const App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [hasError, setHasError] = useState(false);\n\n  useEffect(() => {\n    getTodos()\n      .then(setTodos)\n      .then(() => setIsLoaded(true))\n      .catch(() => setHasError(true));\n  }, []);\n\n  return (\n    <div className=\"App\">\n      {hasError\n        ? (\n          <div className=\"App__sidebar\">\n            <p className=\"App__error-text\">\n              The network connection with the server has been lost!\n              <br />\n              Please try again...\n              <br />\n              Press &quot;F5&quot; on your keyboard to reload the page!\n            </p>\n          </div>\n        )\n        : (\n          <>\n            <div className=\"App__sidebar\">\n              {isLoaded\n                ? (\n                  <TodoList\n                    todos={todos}\n                    selectUser={setSelectedUserId}\n                    selectedUserId={selectedUserId}\n                  />\n                )\n                : (\n                  <p className=\"App__error-text\">\n                    Loading...\n                  </p>\n                )}\n            </div>\n\n            <div className=\"App__content\">\n              <div className=\"App__content-container\">\n                {selectedUserId\n                  ? (\n                    <CurrentUser\n                      userId={selectedUserId}\n                      clearUser={setSelectedUserId}\n                    />\n                  )\n                  : (\n                    <p className=\"App__error-text\">\n                      No user selected\n                    </p>\n                  )}\n              </div>\n            </div>\n          </>\n        )}\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}